/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */

#![cfg_attr(feature = "_unsafe-op-in-unsafe-fn", allow(unsafe_op_in_unsafe_fn))]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(missing_docs)]
#![allow(clippy::missing_safety_doc)]
#![allow(dead_code)]

/* automatically generated by rust-bindgen 0.60.1 using vhost.h and vhost_types.h */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const VIRTIO_CONFIG_S_ACKNOWLEDGE: u32 = 1;
pub const VIRTIO_CONFIG_S_DRIVER: u32 = 2;
pub const VIRTIO_CONFIG_S_DRIVER_OK: u32 = 4;
pub const VIRTIO_CONFIG_S_FEATURES_OK: u32 = 8;
pub const VIRTIO_CONFIG_S_NEEDS_RESET: u32 = 64;
pub const VIRTIO_CONFIG_S_FAILED: u32 = 128;
pub const VIRTIO_TRANSPORT_F_START: u32 = 28;
pub const VIRTIO_TRANSPORT_F_END: u32 = 38;
pub const VIRTIO_F_NOTIFY_ON_EMPTY: u32 = 24;
pub const VIRTIO_F_ANY_LAYOUT: u32 = 27;
pub const VIRTIO_F_VERSION_1: u32 = 32;
pub const VIRTIO_F_ACCESS_PLATFORM: u32 = 33;
pub const VIRTIO_F_IOMMU_PLATFORM: u32 = 33;
pub const VIRTIO_F_RING_PACKED: u32 = 34;
pub const VIRTIO_F_IN_ORDER: u32 = 35;
pub const VIRTIO_F_ORDER_PLATFORM: u32 = 36;
pub const VIRTIO_F_SR_IOV: u32 = 37;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const VRING_DESC_F_NEXT: u32 = 1;
pub const VRING_DESC_F_WRITE: u32 = 2;
pub const VRING_DESC_F_INDIRECT: u32 = 4;
pub const VRING_PACKED_DESC_F_AVAIL: u32 = 7;
pub const VRING_PACKED_DESC_F_USED: u32 = 15;
pub const VRING_USED_F_NO_NOTIFY: u32 = 1;
pub const VRING_AVAIL_F_NO_INTERRUPT: u32 = 1;
pub const VRING_PACKED_EVENT_FLAG_ENABLE: u32 = 0;
pub const VRING_PACKED_EVENT_FLAG_DISABLE: u32 = 1;
pub const VRING_PACKED_EVENT_FLAG_DESC: u32 = 2;
pub const VRING_PACKED_EVENT_F_WRAP_CTR: u32 = 15;
pub const VIRTIO_RING_F_INDIRECT_DESC: u32 = 28;
pub const VIRTIO_RING_F_EVENT_IDX: u32 = 29;
pub const VRING_AVAIL_ALIGN_SIZE: u32 = 2;
pub const VRING_USED_ALIGN_SIZE: u32 = 4;
pub const VRING_DESC_ALIGN_SIZE: u32 = 16;
pub const VHOST_VRING_F_LOG: u32 = 0;
pub const VHOST_ACCESS_RO: u8 = 1;
pub const VHOST_ACCESS_WO: u8 = 2;
pub const VHOST_ACCESS_RW: u8 = 3;
pub const VHOST_IOTLB_MISS: u8 = 1;
pub const VHOST_IOTLB_UPDATE: u8 = 2;
pub const VHOST_IOTLB_INVALIDATE: u8 = 3;
pub const VHOST_IOTLB_ACCESS_FAIL: u8 = 4;
pub const VHOST_IOTLB_BATCH_BEGIN: u8 = 5;
pub const VHOST_IOTLB_BATCH_END: u8 = 6;
pub const VHOST_IOTLB_MSG: u32 = 1;
pub const VHOST_IOTLB_MSG_V2: u32 = 2;
pub const VHOST_PAGE_SIZE: u32 = 4096;
pub const VHOST_SCSI_ABI_VERSION: u32 = 1;
pub const VHOST_F_LOG_ALL: u32 = 26;
pub const VHOST_NET_F_VIRTIO_NET_HDR: u32 = 27;
pub const VHOST_VIRTIO: u32 = 175;
pub const VHOST_VRING_LITTLE_ENDIAN: u32 = 0;
pub const VHOST_VRING_BIG_ENDIAN: u32 = 1;
pub const VHOST_BACKEND_F_IOTLB_MSG_V2: u64 = 1;
pub const VHOST_BACKEND_F_IOTLB_BATCH: u64 = 2;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    fn test_field_fds_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__kernel_fd_set>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__kernel_fd_set),
                "::",
                stringify!(fds_bits)
            )
        );
    }
    test_field_fds_bits();
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    fn test_field_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__kernel_fsid_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__kernel_fsid_t),
                "::",
                stringify!(val)
            )
        );
    }
    test_field_val();
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    fn test_field___val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__fsid_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    test_field___val();
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __virtio16 = __u16;
pub type __virtio32 = __u32;
pub type __virtio64 = __u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vring_desc {
    pub addr: __virtio64,
    pub len: __virtio32,
    pub flags: __virtio16,
    pub next: __virtio16,
}
#[test]
fn bindgen_test_layout_vring_desc() {
    assert_eq!(
        ::std::mem::size_of::<vring_desc>(),
        16usize,
        concat!("Size of: ", stringify!(vring_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<vring_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(vring_desc))
    );
    fn test_field_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_desc),
                "::",
                stringify!(addr)
            )
        );
    }
    test_field_addr();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_desc),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_desc),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_desc),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
}
#[repr(C)]
#[derive(Debug)]
pub struct vring_avail {
    pub flags: __virtio16,
    pub idx: __virtio16,
    pub ring: __IncompleteArrayField<__virtio16>,
}
#[test]
fn bindgen_test_layout_vring_avail() {
    assert_eq!(
        ::std::mem::size_of::<vring_avail>(),
        4usize,
        concat!("Size of: ", stringify!(vring_avail))
    );
    assert_eq!(
        ::std::mem::align_of::<vring_avail>(),
        2usize,
        concat!("Alignment of ", stringify!(vring_avail))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_avail>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_avail),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_avail>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_avail),
                "::",
                stringify!(idx)
            )
        );
    }
    test_field_idx();
    fn test_field_ring() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_avail>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ring) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_avail),
                "::",
                stringify!(ring)
            )
        );
    }
    test_field_ring();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vring_used_elem {
    pub id: __virtio32,
    pub len: __virtio32,
}
#[test]
fn bindgen_test_layout_vring_used_elem() {
    assert_eq!(
        ::std::mem::size_of::<vring_used_elem>(),
        8usize,
        concat!("Size of: ", stringify!(vring_used_elem))
    );
    assert_eq!(
        ::std::mem::align_of::<vring_used_elem>(),
        4usize,
        concat!("Alignment of ", stringify!(vring_used_elem))
    );
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_used_elem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_used_elem),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_used_elem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_used_elem),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
}
pub type vring_used_elem_t = vring_used_elem;
#[repr(C)]
#[derive(Debug)]
pub struct vring_used {
    pub flags: __virtio16,
    pub idx: __virtio16,
    pub ring: __IncompleteArrayField<vring_used_elem_t>,
}
#[test]
fn bindgen_test_layout_vring_used() {
    assert_eq!(
        ::std::mem::size_of::<vring_used>(),
        4usize,
        concat!("Size of: ", stringify!(vring_used))
    );
    assert_eq!(
        ::std::mem::align_of::<vring_used>(),
        4usize,
        concat!("Alignment of ", stringify!(vring_used))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_used>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_used),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_used>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_used),
                "::",
                stringify!(idx)
            )
        );
    }
    test_field_idx();
    fn test_field_ring() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_used>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ring) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_used),
                "::",
                stringify!(ring)
            )
        );
    }
    test_field_ring();
}
pub type vring_desc_t = vring_desc;
pub type vring_avail_t = vring_avail;
pub type vring_used_t = vring_used;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vring {
    pub num: ::std::os::raw::c_uint,
    pub desc: *mut vring_desc_t,
    pub avail: *mut vring_avail_t,
    pub used: *mut vring_used_t,
}
#[test]
fn bindgen_test_layout_vring() {
    assert_eq!(
        ::std::mem::size_of::<vring>(),
        32usize,
        concat!("Size of: ", stringify!(vring))
    );
    assert_eq!(
        ::std::mem::align_of::<vring>(),
        8usize,
        concat!("Alignment of ", stringify!(vring))
    );
    fn test_field_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vring),
                "::",
                stringify!(num)
            )
        );
    }
    test_field_num();
    fn test_field_desc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(vring),
                "::",
                stringify!(desc)
            )
        );
    }
    test_field_desc();
    fn test_field_avail() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).avail) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(vring),
                "::",
                stringify!(avail)
            )
        );
    }
    test_field_avail();
    fn test_field_used() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(vring),
                "::",
                stringify!(used)
            )
        );
    }
    test_field_used();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vring_packed_desc_event {
    pub off_wrap: __le16,
    pub flags: __le16,
}
#[test]
fn bindgen_test_layout_vring_packed_desc_event() {
    assert_eq!(
        ::std::mem::size_of::<vring_packed_desc_event>(),
        4usize,
        concat!("Size of: ", stringify!(vring_packed_desc_event))
    );
    assert_eq!(
        ::std::mem::align_of::<vring_packed_desc_event>(),
        2usize,
        concat!("Alignment of ", stringify!(vring_packed_desc_event))
    );
    fn test_field_off_wrap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_packed_desc_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).off_wrap) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_packed_desc_event),
                "::",
                stringify!(off_wrap)
            )
        );
    }
    test_field_off_wrap();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_packed_desc_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_packed_desc_event),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vring_packed_desc {
    pub addr: __le64,
    pub len: __le32,
    pub id: __le16,
    pub flags: __le16,
}
#[test]
fn bindgen_test_layout_vring_packed_desc() {
    assert_eq!(
        ::std::mem::size_of::<vring_packed_desc>(),
        16usize,
        concat!("Size of: ", stringify!(vring_packed_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<vring_packed_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(vring_packed_desc))
    );
    fn test_field_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_packed_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_packed_desc),
                "::",
                stringify!(addr)
            )
        );
    }
    test_field_addr();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_packed_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_packed_desc),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_packed_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_packed_desc),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vring_packed_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(vring_packed_desc),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vhost_vring_state {
    pub index: ::std::os::raw::c_uint,
    pub num: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_vhost_vring_state() {
    assert_eq!(
        ::std::mem::size_of::<vhost_vring_state>(),
        8usize,
        concat!("Size of: ", stringify!(vhost_vring_state))
    );
    assert_eq!(
        ::std::mem::align_of::<vhost_vring_state>(),
        4usize,
        concat!("Alignment of ", stringify!(vhost_vring_state))
    );
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vring_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vring_state),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vring_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vring_state),
                "::",
                stringify!(num)
            )
        );
    }
    test_field_num();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vhost_vring_file {
    pub index: ::std::os::raw::c_uint,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vhost_vring_file() {
    assert_eq!(
        ::std::mem::size_of::<vhost_vring_file>(),
        8usize,
        concat!("Size of: ", stringify!(vhost_vring_file))
    );
    assert_eq!(
        ::std::mem::align_of::<vhost_vring_file>(),
        4usize,
        concat!("Alignment of ", stringify!(vhost_vring_file))
    );
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vring_file>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vring_file),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_fd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vring_file>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vring_file),
                "::",
                stringify!(fd)
            )
        );
    }
    test_field_fd();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vhost_vring_addr {
    pub index: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub desc_user_addr: __u64,
    pub used_user_addr: __u64,
    pub avail_user_addr: __u64,
    pub log_guest_addr: __u64,
}
#[test]
fn bindgen_test_layout_vhost_vring_addr() {
    assert_eq!(
        ::std::mem::size_of::<vhost_vring_addr>(),
        40usize,
        concat!("Size of: ", stringify!(vhost_vring_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<vhost_vring_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(vhost_vring_addr))
    );
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vring_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vring_addr),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vring_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vring_addr),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_desc_user_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vring_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).desc_user_addr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vring_addr),
                "::",
                stringify!(desc_user_addr)
            )
        );
    }
    test_field_desc_user_addr();
    fn test_field_used_user_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vring_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).used_user_addr) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vring_addr),
                "::",
                stringify!(used_user_addr)
            )
        );
    }
    test_field_used_user_addr();
    fn test_field_avail_user_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vring_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).avail_user_addr) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vring_addr),
                "::",
                stringify!(avail_user_addr)
            )
        );
    }
    test_field_avail_user_addr();
    fn test_field_log_guest_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vring_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).log_guest_addr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vring_addr),
                "::",
                stringify!(log_guest_addr)
            )
        );
    }
    test_field_log_guest_addr();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vhost_iotlb_msg {
    pub iova: __u64,
    pub size: __u64,
    pub uaddr: __u64,
    pub perm: __u8,
    pub type_: __u8,
}

impl Default for vhost_iotlb_msg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}

#[test]
fn bindgen_test_layout_vhost_iotlb_msg() {
    assert_eq!(
        ::std::mem::size_of::<vhost_iotlb_msg>(),
        32usize,
        concat!("Size of: ", stringify!(vhost_iotlb_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<vhost_iotlb_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(vhost_iotlb_msg))
    );
    fn test_field_iova() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_iotlb_msg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iova) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_iotlb_msg),
                "::",
                stringify!(iova)
            )
        );
    }
    test_field_iova();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_iotlb_msg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_iotlb_msg),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_uaddr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_iotlb_msg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uaddr) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_iotlb_msg),
                "::",
                stringify!(uaddr)
            )
        );
    }
    test_field_uaddr();
    fn test_field_perm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_iotlb_msg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).perm) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_iotlb_msg),
                "::",
                stringify!(perm)
            )
        );
    }
    test_field_perm();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_iotlb_msg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            25usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_iotlb_msg),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vhost_msg {
    pub type_: ::std::os::raw::c_int,
    pub __bindgen_anon_1: vhost_msg__bindgen_ty_1,
}

impl Default for vhost_msg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union vhost_msg__bindgen_ty_1 {
    pub iotlb: vhost_iotlb_msg,
    pub padding: [__u8; 64usize],
}
#[test]
fn bindgen_test_layout_vhost_msg__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<vhost_msg__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(vhost_msg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<vhost_msg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(vhost_msg__bindgen_ty_1))
    );
    fn test_field_iotlb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_msg__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iotlb) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_msg__bindgen_ty_1),
                "::",
                stringify!(iotlb)
            )
        );
    }
    test_field_iotlb();
    fn test_field_padding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_msg__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_msg__bindgen_ty_1),
                "::",
                stringify!(padding)
            )
        );
    }
    test_field_padding();
}
#[test]
fn bindgen_test_layout_vhost_msg() {
    assert_eq!(
        ::std::mem::size_of::<vhost_msg>(),
        72usize,
        concat!("Size of: ", stringify!(vhost_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<vhost_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(vhost_msg))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_msg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_msg),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vhost_msg_v2 {
    pub type_: __u32,
    pub reserved: __u32,
    pub __bindgen_anon_1: vhost_msg_v2__bindgen_ty_1,
}

impl Default for vhost_msg_v2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union vhost_msg_v2__bindgen_ty_1 {
    pub iotlb: vhost_iotlb_msg,
    pub padding: [__u8; 64usize],
}
#[test]
fn bindgen_test_layout_vhost_msg_v2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<vhost_msg_v2__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(vhost_msg_v2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<vhost_msg_v2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(vhost_msg_v2__bindgen_ty_1))
    );
    fn test_field_iotlb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_msg_v2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iotlb) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_msg_v2__bindgen_ty_1),
                "::",
                stringify!(iotlb)
            )
        );
    }
    test_field_iotlb();
    fn test_field_padding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_msg_v2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_msg_v2__bindgen_ty_1),
                "::",
                stringify!(padding)
            )
        );
    }
    test_field_padding();
}
#[test]
fn bindgen_test_layout_vhost_msg_v2() {
    assert_eq!(
        ::std::mem::size_of::<vhost_msg_v2>(),
        72usize,
        concat!("Size of: ", stringify!(vhost_msg_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<vhost_msg_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(vhost_msg_v2))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_msg_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_msg_v2),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_msg_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_msg_v2),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vhost_memory_region {
    pub guest_phys_addr: __u64,
    pub memory_size: __u64,
    pub userspace_addr: __u64,
    pub flags_padding: __u64,
}
#[test]
fn bindgen_test_layout_vhost_memory_region() {
    assert_eq!(
        ::std::mem::size_of::<vhost_memory_region>(),
        32usize,
        concat!("Size of: ", stringify!(vhost_memory_region))
    );
    assert_eq!(
        ::std::mem::align_of::<vhost_memory_region>(),
        8usize,
        concat!("Alignment of ", stringify!(vhost_memory_region))
    );
    fn test_field_guest_phys_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_memory_region>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).guest_phys_addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_memory_region),
                "::",
                stringify!(guest_phys_addr)
            )
        );
    }
    test_field_guest_phys_addr();
    fn test_field_memory_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_memory_region>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).memory_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_memory_region),
                "::",
                stringify!(memory_size)
            )
        );
    }
    test_field_memory_size();
    fn test_field_userspace_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_memory_region>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).userspace_addr) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_memory_region),
                "::",
                stringify!(userspace_addr)
            )
        );
    }
    test_field_userspace_addr();
    fn test_field_flags_padding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_memory_region>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags_padding) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_memory_region),
                "::",
                stringify!(flags_padding)
            )
        );
    }
    test_field_flags_padding();
}
#[repr(C)]
#[derive(Debug)]
pub struct vhost_memory {
    pub nregions: __u32,
    pub padding: __u32,
    pub regions: __IncompleteArrayField<vhost_memory_region>,
}
#[test]
fn bindgen_test_layout_vhost_memory() {
    assert_eq!(
        ::std::mem::size_of::<vhost_memory>(),
        8usize,
        concat!("Size of: ", stringify!(vhost_memory))
    );
    assert_eq!(
        ::std::mem::align_of::<vhost_memory>(),
        8usize,
        concat!("Alignment of ", stringify!(vhost_memory))
    );
    fn test_field_nregions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_memory>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nregions) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_memory),
                "::",
                stringify!(nregions)
            )
        );
    }
    test_field_nregions();
    fn test_field_padding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_memory>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_memory),
                "::",
                stringify!(padding)
            )
        );
    }
    test_field_padding();
    fn test_field_regions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_memory>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).regions) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_memory),
                "::",
                stringify!(regions)
            )
        );
    }
    test_field_regions();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vhost_scsi_target {
    pub abi_version: ::std::os::raw::c_int,
    pub vhost_wwpn: [::std::os::raw::c_char; 224usize],
    pub vhost_tpgt: ::std::os::raw::c_ushort,
    pub reserved: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vhost_scsi_target() {
    assert_eq!(
        ::std::mem::size_of::<vhost_scsi_target>(),
        232usize,
        concat!("Size of: ", stringify!(vhost_scsi_target))
    );
    assert_eq!(
        ::std::mem::align_of::<vhost_scsi_target>(),
        4usize,
        concat!("Alignment of ", stringify!(vhost_scsi_target))
    );
    fn test_field_abi_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_scsi_target>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).abi_version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_scsi_target),
                "::",
                stringify!(abi_version)
            )
        );
    }
    test_field_abi_version();
    fn test_field_vhost_wwpn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_scsi_target>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vhost_wwpn) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_scsi_target),
                "::",
                stringify!(vhost_wwpn)
            )
        );
    }
    test_field_vhost_wwpn();
    fn test_field_vhost_tpgt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_scsi_target>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vhost_tpgt) as usize - ptr as usize
            },
            228usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_scsi_target),
                "::",
                stringify!(vhost_tpgt)
            )
        );
    }
    test_field_vhost_tpgt();
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_scsi_target>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            230usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_scsi_target),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
}
#[repr(C)]
#[derive(Debug)]
pub struct vhost_vdpa_config {
    pub off: __u32,
    pub len: __u32,
    pub buf: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_vhost_vdpa_config() {
    assert_eq!(
        ::std::mem::size_of::<vhost_vdpa_config>(),
        8usize,
        concat!("Size of: ", stringify!(vhost_vdpa_config))
    );
    assert_eq!(
        ::std::mem::align_of::<vhost_vdpa_config>(),
        4usize,
        concat!("Alignment of ", stringify!(vhost_vdpa_config))
    );
    fn test_field_off() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vdpa_config>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vdpa_config),
                "::",
                stringify!(off)
            )
        );
    }
    test_field_off();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vdpa_config>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vdpa_config),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vdpa_config>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vdpa_config),
                "::",
                stringify!(buf)
            )
        );
    }
    test_field_buf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vhost_vdpa_iova_range {
    pub first: __u64,
    pub last: __u64,
}
#[test]
fn bindgen_test_layout_vhost_vdpa_iova_range() {
    assert_eq!(
        ::std::mem::size_of::<vhost_vdpa_iova_range>(),
        16usize,
        concat!("Size of: ", stringify!(vhost_vdpa_iova_range))
    );
    assert_eq!(
        ::std::mem::align_of::<vhost_vdpa_iova_range>(),
        8usize,
        concat!("Alignment of ", stringify!(vhost_vdpa_iova_range))
    );
    fn test_field_first() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vdpa_iova_range>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vdpa_iova_range),
                "::",
                stringify!(first)
            )
        );
    }
    test_field_first();
    fn test_field_last() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vhost_vdpa_iova_range>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(vhost_vdpa_iova_range),
                "::",
                stringify!(last)
            )
        );
    }
    test_field_last();
}
